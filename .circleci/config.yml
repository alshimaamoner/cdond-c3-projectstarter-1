version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment 
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  # revert-migrations:
  #   description: Revert the last migration
  #   parameters:
  #       workflow_id:
  #           type: string      
  #   steps:
  #       - run:
  #           name: Revert migrations
  #           when: on_fail
  #           command: |
  #               SUCCESS=$(curl --insecure  https://kvdb.io/MJ9xRzcR82e6NKBRHirxyM/migration_<< parameters.workflow_id >>)
  #               # Logic for reverting the database state
  #               if (( $SUCCESS == 1 ));
  #               then
  #                   cd ~/project/backend
  #                   npm install
  #                   npm run migration:revert
  #               fi 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - front-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |   
            cd backend
            npm install     
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical 
            #npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |   
            cd backend
            npm install
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment    
  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["28:db:40:89:33:75:b4:d7:02:cf:63:b6:5c:86:7c:53"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment  
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           # Run and save the migration output
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |  
  #             cat ~/project/backend/migrations_dump.txt 
  #             if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
  #             then
  #                 curl -k https://kvdb.io/MJ9xRzcR82e6NKBRHirxyM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #             fi
  #     - destroy_environment 
  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip ansible
  #           curl -sL https://rpm.nodesource.com/setup_10.x | bash -
  #           yum install -y nodejs
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[0].Instances[0].PublicIpAddress' | tr -d '"')
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy_environment 
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["0d:0c:f0:0a:23:a9:81:e7:51:bc:cf:ab:77:33:fc:06"]
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible tar gzip nodejs npm
  #           pip3 install --upgrade pip
  #           pip3 install --no-cache-dir awscli
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           mkdir -p .circleci/ansible/roles/deploy/files
  #           echo NODE_ENV=production > .circleci/ansible/roles/deploy/files/.env
  #           echo ENVIRONMENT=production >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_CONNECTION=postgres >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_ENTITIES='./dist/modules/domain/*/*/*.entity.js' >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_HOST=${TYPEORM_HOST} >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_PORT=${TYPEORM_PORT} >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .circleci/ansible/roles/deploy/files/.env
  #           echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .circleci/ansible/roles/deploy/files/.env
  #           ls .circleci/ansible/roles/deploy/files
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy_environment
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # smoke-test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl
  #           apk add --no-cache python3 py3-pip \
  #             && pip3 install --upgrade pip \
  #             && pip3 install --no-cache-dir awscli \
  #             && rm -rf /var/cache/apk/*
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[0].Instances[0].PublicIpAddress' | tr -d '"')
  #           export API_URL="http://${BACKEND_IP}:3030" 
  #           echo "${API_URL}"
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #               return 0
  #           else
  #               return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo ${URL} 
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy_environment 
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                     --no-paginate --output text)
  #           echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
  #           curl -d "${OLD_WORKFLOW_ID}" https://kvdb.io/MJ9xRzcR82e6NKBRHirxyM/old_workflow_id
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople
  #     - destroy_environment
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id and Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/MJ9xRzcR82e6NKBRHirxyM/old_workflow_id)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #           if [[ -z "${OldWorkflowID}" ]]
  #           then
  #             echo "No old stack"
  #             return 0
  #           fi
  #           # Fetch the stack names          
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"  
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
  #             echo "Stacks deleted succesfully"
  #           fi     


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
                        